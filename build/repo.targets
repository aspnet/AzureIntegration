<Project>
  <Import Project="PackSiteExtension.targets" />

  <PropertyGroup>
      <ComposeSdk Condition="$(SITE_EXTENSION_SDK_VERSION) == ''">True</ComposeSdk>
      <_SdkVersion>$(SITE_EXTENSION_SDK_VERSION)</_SdkVersion>
      <_SdkVersion Condition="'$(_SdkVersion)' == ''">$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName('$(MSBuildExtensionsPath)'))))</_SdkVersion>
      <_SdkFeed>$(SITE_EXTENSION_SDK_FEED)</_SdkFeed>
      <_SdkFeed Condition="'$(_SdkFeed)' == ''">$(DefaultDotNetAssetFeed)</_SdkFeed>
      <TestDotNetPath>$(RepositoryRoot).test-dotnet\</TestDotNetPath>
      <AppsArtifactDirectory>$(RepositoryRoot)artifacts\apps</AppsArtifactDirectory>
      <SiteExtensionWorkingDirectory>$(TestDotNetPath)extension\$(SiteExtensionArch)\</SiteExtensionWorkingDirectory>
      <SiteExtensionOutputDirectory>$(RepositoryRoot)artifacts\build</SiteExtensionOutputDirectory>
      <TestProjectDirectory>$(RepositoryRoot)\test\Microsoft.AspNetCore.AzureAppServices.FunctionalTests\</TestProjectDirectory>
      <SiteExtensionFeed Condition="$(SiteExtensionFeed) == ''">https://dotnet.myget.org/F/aspnetcore-dev/</SiteExtensionFeed>
      <SiteExtensionNETCoreAppPackageVersion>$(MicrosoftNETCoreApp22PackageVersion)</SiteExtensionNETCoreAppPackageVersion>
  </PropertyGroup>

  <Target Name="_AddTestRuntimes">
    <ItemGroup>
      <DotNetCoreSdk Include="2.0.0" InstallDir="$(TestDotNetPath)2.0\" FallbackPackageCache="True" />
      <DotNetCoreSdk Include="$(_SdkVersion)" InstallDir="$(TestDotNetPath)latest\" FallbackPackageCache="True" />
    </ItemGroup>
  </Target>

  <Target Name="_CleanSiteExtension">
    <RemoveDir Directories="$(SiteExtensionWorkingDirectory)" Condition="Exists($(SiteExtensionWorkingDirectory))" />
  </Target>

  <Target Name="_AddSiteExtensionRuntime">
    <ItemGroup>
      <DotNetCoreRuntime
        Include="$(SiteExtensionNETCoreAppPackageVersion)"
        InstallDir="$(SiteExtensionWorkingDirectory)"
        Arch="$(SiteExtensionArch)"
        Feed="$(DotNetAssetRootUrl)"
        FeedCredential="$(DotNetAssetRootAccessTokenSuffix)" />
    </ItemGroup>
  </Target>

  <Target Name="PrepareSiteExtensionSdk" DependsOnTargets="_AddSiteExtensionRuntime;InstallDotNet">
  </Target>

  <Target Name="PrepareSiteExtensionSdks">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="PrepareSiteExtensionSdk" Properties="SiteExtensionArch=x86" />
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="PrepareSiteExtensionSdk" Properties="SiteExtensionArch=x64" />
  </Target>

  <Target Name="BuildSiteExtension" DependsOnTargets="_CleanSiteExtension;PrepareSiteExtensionSdks">
    <MSBuild Projects="%(SiteExtensions.Identity)"
      Targets="Restore"
      Properties="BuildNumber=$(BuildNumber)" />

    <MSBuild Projects="%(SiteExtensions.Identity)"
      Targets="Pack"
      Properties="%(SiteExtensions.BuildProperties);DotnetHomeDirectory=$(SiteExtensionWorkingDirectory);BuildNumber=$(BuildNumber);PackageOutputPath=$(SiteExtensionOutputDirectory)" />
  </Target>

  <Target Name="PushSiteExtension" DependsOnTargets="BuildSiteExtension">
    <ItemGroup>
      <RepositoryNupkgs Include="$(SiteExtensionOutputDirectory)\%(SiteExtensions.PackageName).*.nupkg" />
    </ItemGroup>

    <PushNuGetPackages
      Packages="@(RepositoryNupkgs)"
      Feed="$(SiteExtensionFeed)"
      ApiKey="$(APIKey)"
      TimeoutSeconds="600"/>

  </Target>

  <Target Name="TestSiteExtension" DependsOnTargets="_AddTestRuntimes;InstallDotNet;Restore">

    <Copy SourceFiles="$(TestProjectDirectory)NuGet.config.template" DestinationFiles="$(RepositoryRoot)artifacts\NuGet.config" />
    <Copy SourceFiles="$(TestProjectDirectory)global.json.template" DestinationFiles="$(RepositoryRoot)artifacts\global.json" />
    <Copy SourceFiles="$(TestProjectDirectory)Directory.Build.props.template" DestinationFiles="$(RepositoryRoot)artifacts\Directory.Build.props" />
    <Copy SourceFiles="$(TestProjectDirectory)Directory.Build.targets.template" DestinationFiles="$(RepositoryRoot)artifacts\Directory.Build.targets" />

    <Exec Command="%(DotNetCoreSdk.InstallDir)dotnet msbuild /version" WorkingDirectory="$(RepositoryRoot)artifacts\" />

    <Exec Command="dotnet run" WorkingDirectory="$(TestProjectDirectory)"/>

  </Target>

  <Target Name="CleanArtifactsApplications" BeforeTargets="CleanArtifacts" >
    <!--
      git deploy creates read-only files which msbuild is unable to remove
      NOTE: we run tests only on windows
    -->
    <Exec Command="rmdir /S /Q &quot;$(AppsArtifactDirectory)&quot;" Condition="Exists($(AppsArtifactDirectory))" />
    <RemoveDir Directories="$(SiteExtensionOutputDirectory)" Condition="Exists($(SiteExtensionOutputDirectory))" />
  </Target>

</Project>
